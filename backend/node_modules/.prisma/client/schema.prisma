generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  passHash      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  alarms        Alarm[]
  history       History[]
  media         Media[]
  tasks         Task[]
  refreshTokens RefreshToken[]
}

model Task {
  id          String   @id @default(cuid())
  userId      String
  description String?
  status      String   @default("pending")
  priority    String   @default("medium")
  alarmId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  alarm       Alarm?   @relation("TaskAlarm", fields: [alarmId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@index([userId, createdAt])
}

model Media {
  id            String   @id @default(cuid())
  userId        String
  name          String
  url           String
  publicId      String
  type          String
  createdAt     DateTime @default(now())
  alarmsAsAudio Alarm[]  @relation("AlarmAudio")
  alarmsAsImage Alarm[]  @relation("AlarmImage")
  user          User     @relation(fields: [userId], references: [id])
}

model Alarm {
  id         String    @id @default(cuid())
  userId     String
  name       String
  audioId    String?
  imageId    String?
  scheduleAt DateTime?
  cronExpr   String?
  snoozeMins Int       @default(5)
  enabled    Boolean   @default(true)
  enable     Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  audio Media? @relation("AlarmAudio", fields: [audioId], references: [id])
  image Media? @relation("AlarmImage", fields: [imageId], references: [id])
  user  User   @relation(fields: [userId], references: [id])
  task  Task[] @relation("TaskAlarm")
}

model History {
  id          String   @id @default(cuid())
  userId      String
  entity      String
  action      String
  payloadJson String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
